// Generated by CoffeeScript 1.9.3

/*
  NODE MODULES
 */

(function() {
  var call, check, flag, flagger, matchKey,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  flagger = require('flagger')();


  /*
    SETUP
   */

  flag = flagger.print || flagger.p;


  /*
    FUNCTIONS
   */

  matchKey = function(keys) {
    var i, key, len;
    if (typeof keys === 'string' && indexOf.call(flag, keys) >= 0) {
      return true;
    }
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      if (indexOf.call(flag, key) >= 0) {
        return true;
      }
    }
  };

  check = function(keyString) {
    return flag && (flag.length === 0 || matchKey(keyString));
  };

  call = function() {
    var func, keyString, toPrint;
    func = arguments[0], keyString = arguments[1], toPrint = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    if (check(keyString)) {
      return console[func].apply(console, toPrint);
    }
  };


  /*
    EXPORT
   */

  module.exports = {
    assert: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['assert'].concat(slice.call(args)));
    },
    count: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['count'].concat(slice.call(args)));
    },
    debug: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['debug'].concat(slice.call(args)));
    },
    dir: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['dir'].concat(slice.call(args)));
    },
    dirxml: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['dirxml'].concat(slice.call(args)));
    },
    error: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['error'].concat(slice.call(args)));
    },
    _exception: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['_exception'].concat(slice.call(args)));
    },
    group: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['group'].concat(slice.call(args)));
    },
    groupCollapsed: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['groupCollapsed'].concat(slice.call(args)));
    },
    groupEnd: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['groupEnd'].concat(slice.call(args)));
    },
    info: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['info'].concat(slice.call(args)));
    },
    log: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['log'].concat(slice.call(args)));
    },
    profile: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['profile'].concat(slice.call(args)));
    },
    profileEnd: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['profileEnd'].concat(slice.call(args)));
    },
    table: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['table'].concat(slice.call(args)));
    },
    time: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['time'].concat(slice.call(args)));
    },
    timeEnd: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['timeEnd'].concat(slice.call(args)));
    },
    timeStamp: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['timeStamp'].concat(slice.call(args)));
    },
    trace: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['trace'].concat(slice.call(args)));
    },
    warn: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return call.apply(null, ['warn'].concat(slice.call(args)));
    }
  };

}).call(this);
